library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity mem is
    generic (
        DATA_WIDTH : natural := 32;  -- Data width for memory
        ADDR_WIDTH : natural := 10   -- Address width for memory
    );
    port (
        clk   : in std_logic;                                      -- Clock signal
        addr  : in std_logic_vector((ADDR_WIDTH-1) downto 0);      -- Address input
        data  : in std_logic_vector((DATA_WIDTH-1) downto 0);      -- Data input
        we    : in std_logic := '1';                               -- Write enable signal
        q     : out std_logic_vector((DATA_WIDTH-1) downto 0)      -- Data output
    );
end mem;

architecture rtl of mem is

    -- Define a subtype for a word in the memory
    subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
    
    -- Create a 2D array representing the memory
    type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;
    
    -- Signal declaration for the RAM (memory)
    signal ram : memory_t;

begin

    -- Process that handles memory write operation on the rising edge of the clock
    process(clk)
    begin
        if rising_edge(clk) then
            if we = '1' then
                ram(to_integer(unsigned(addr))) <= data;  -- Write data to the specified address
            end if;
        end if;
    end process;

    -- Continuous assignment for memory read operation
    q <= ram(to_integer(unsigned(addr)));  -- Output the data at the specified address

end rtl;

